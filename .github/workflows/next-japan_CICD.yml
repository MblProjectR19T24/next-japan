name: CI/CD Pipeline for next-japan
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run build

  build_project_and_sonar_scan:
   name: Build and analyze
   runs-on: ubuntu-latest
   needs: build
   steps:
     - uses: actions/checkout@v4
       with:
         fetch-depth: 0 
      #Shallow clones should be disabled for a better relevancy of analysis
     - name: Show Sonar Project File
       run: cat .sonar-project.properties
     - uses: sonarsource/sonarqube-scan-action@master
       env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
       with:
         args: >
           -Dsonar.projectKey=sonar
  
  buils_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: build_project_and_sonar_scan
    steps:
    - uses: actions/checkout@v4
   # - uses: Jagoda11/react-template@v1.1.0
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and Push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
              manikcse/next-japan:latest
              manikcse/next-japan:${{ github.sha }}
        file: ./Dockerfile
      
  deploy:
     name: Deploy to EC2
     runs-on: ubuntu-latest
     needs: buils_docker_image_and_push
     steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Build Docker image
        run: |
          docker build -t next-japan-app .

      - name: Copy Docker image to EC2 via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "~/next-japan"

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/next-japan
            docker stop next-japan || true
            docker rm next-japan || true
            docker build -t next-japan-app .
            docker run -d --name next-japan -p 3000:3000 next-japan-app
  
  deploy-monitoring:
    name: Install monitoring tool Prometheus & Grafana on EC2
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Connect to EC2 and set up monitoring stack
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Update system
            sudo apt update -y

            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com | sudo bash
              sudo usermod -aG docker $USER
            fi

            # Create Docker Compose file
            mkdir -p ~/monitoring
            cd ~/monitoring

            cat > docker-compose.yml <<EOF
            version: '3'

            services:
              prometheus:
                image: prom/prometheus
                ports:
                  - "9090:9090"
                volumes:
                  - ./prometheus.yml:/etc/prometheus/prometheus.yml

              node-exporter:
                image: prom/node-exporter
                ports:
                  - "9100:9100"

              grafana:
                image: grafana/grafana
                ports:
                  - "3001:3000"
                environment:
                  - GF_SECURITY_ADMIN_USER=admin
                  - GF_SECURITY_ADMIN_PASSWORD=admin
                volumes:
                  - grafana-data:/var/lib/grafana

            volumes:
              grafana-data:
            EOF

            # Create Prometheus config
            cat > prometheus.yml <<EOF
            global:
              scrape_interval: 15s

            scrape_configs:
              - job_name: 'prometheus'
                static_configs:
                  - targets: ['13.210.175.23:9090']

              - job_name: 'node-exporter'
                static_configs:
                  - targets: ['13.210.175.23:9100']
            EOF

            # Start stack
            docker compose down
            docker compose up -d
